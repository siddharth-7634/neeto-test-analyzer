import { ChatQuestionsApis } from "@apis";
import { preChatQuestion } from "@apis/types";
import {
  CustomCommands,
  COMMON_SELECTORS as NEETO_COMMON_SELECTORS,
} from "@neetoplaywright";
import { expect, Page } from "@playwright/test";
import { Field } from "@poms/types";
import { SETTINGS_SELECTORS } from "@selectors";

export default class ChatQuestions {
  constructor(
    private page: Page,
    private neetoPlaywrightUtilities: CustomCommands,
    private chatQuestionsApi: ChatQuestionsApis
  ) {}

  addPreChatQuestions = async (items: preChatQuestion[]) => {
    const existingFormIds = await this.chatQuestionsApi.getPreChatFormId();
    const existingFormIdsResponse = await existingFormIds.json();
    const preChatFormId = existingFormIdsResponse.forms[0].id;

    await Promise.all(items.map(item =>
      this.chatQuestionsApi.addPreChatQuestions(preChatFormId, item)
    ));
  };
  deleteExistingPreChatQuestions = async () => {
    const existingFormIds = await this.chatQuestionsApi.getPreChatFormId();
    const existingFormIdsResponse = await existingFormIds.json();
    const preChatFormId = existingFormIdsResponse.forms[0].id;

    const existingPreChatQuestions =
      await this.chatQuestionsApi.getPreChatQuestions();

    const existingPreChatQuestionsResponse =
      await existingPreChatQuestions.json();

    const previousPreChatNode =
      existingPreChatQuestionsResponse.pre_chat_questions;

    const destroyPreviousPreChat = previousPreChatNode.map(
      async question =>
        await this.chatQuestionsApi.deleteQuestion({
          formId: preChatFormId,
          questionId: question.id,
        })
    );
    await Promise.all(destroyPreviousPreChat);
  };

  deleteExistingPostChatQuestions = async () => {
    const existingFormIds = await this.chatQuestionsApi.getPostChatFormId();
    const existingFormIdsResponse = await existingFormIds.json();
    const postChatFormId = existingFormIdsResponse.forms[1].id;

    const existingPostChatQuestions =
      await this.chatQuestionsApi.getPostChatQuestions();

    const existingPostChatQuestionsResponse =
      await existingPostChatQuestions.json();

    const previousPostChatNode =
      existingPostChatQuestionsResponse.post_chat_questions;

    const destroyPreviousPostChat = previousPostChatNode.map(question =>
      this.chatQuestionsApi.deleteQuestion({
        formId: postChatFormId,
        questionId: question.id,
      })
    );
    await Promise.all(destroyPreviousPostChat);
  };

  addFields = async (items: Field[]) => {
    for (const { selector, label, question, placeHolder } of items) {
      await this.page
        .getByTestId(SETTINGS_SELECTORS.widget.addQuestionButton)
        .click({ timeout: 15000 });
      await this.page.getByTestId(selector).click();

      await this.page
        .getByTestId(SETTINGS_SELECTORS.widget.inputField(label))
        .click({ timeout: 15000 });

      await this.page
        .getByTestId(SETTINGS_SELECTORS.widget.questionTextInput)
        .fill(question);

      await this.page
        .getByTestId(SETTINGS_SELECTORS.widget.placeholderTextInput)
        .fill(placeHolder);

      await this.page
        .getByTestId(NEETO_COMMON_SELECTORS.saveChangesButton)
        .click();

      await expect(
        this.page.getByTestId(
          SETTINGS_SELECTORS.widget.questionCardLabel(question)
        )
      ).toHaveText(question);
    }
  };
}
