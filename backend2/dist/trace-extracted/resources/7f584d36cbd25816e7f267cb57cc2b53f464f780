# Test info

- Name: Inbox conversation page >> should be able to filter closed conversation
- Location: /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/inbox/conversationViews.spec.ts:49:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByTestId('conversation-list-item-title').filter({ hasText: 'Cecilia O\'Connell' })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByTestId('conversation-list-item-title').filter({ hasText: 'Cecilia O\'Connell' })

    at ConversationsPage.verifyConversationExistence (/home/neetoci/neeto-chat-web/playwright-tests/e2e/poms/conversations.ts:303:7)
    at /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/inbox/conversationViews.spec.ts:69:33
    at /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/inbox/conversationViews.spec.ts:65:5
```

# Page snapshot

```yaml
- button "AO":
  - paragraph: AO
  - img
- link:
  - /url: /
  - img
- link "Inbox":
  - /url: /admin/widget/inbox/e6659eb6-4afb-42b5-976e-c243d2f1735a?filter_by=closed
  - img
  - text: Inbox
  - img
- link "Unresolved 3":
  - /url: /admin/widget/inbox?filter_by=unresolved
- link "Assigned to me 1":
  - /url: /admin/widget/inbox?filter_by=assigned_to_me
- link "Unassigned 2":
  - /url: /admin/widget/inbox?filter_by=unassigned
- link "Assigned 1":
  - /url: /admin/widget/inbox?filter_by=assigned
- link "Mentioned 0":
  - /url: /admin/widget/inbox?filter_by=mentioned
- link "Waiting on customer 0":
  - /url: /admin/widget/inbox?filter_by=waiting_on_customer
- link "Closed 1":
  - /url: /admin/widget/inbox?filter_by=closed
- link "Spam 0":
  - /url: /admin/widget/inbox?filter_by=spam
- link "Trash 0":
  - /url: /admin/widget/inbox?filter_by=trash
- link "All 3":
  - /url: /admin/widget/inbox?filter_by=all
- link "Contacts":
  - /url: /admin/contacts?filter_by=all
  - img
  - text: Contacts
  - img
- link "Team members":
  - /url: /admin/members
  - img
  - text: Team members
- link "Admin panel":
  - /url: /admin/admin-panel
  - img
  - text: Admin panel
- link "My preferences":
  - /url: /admin/my-preferences
  - img
  - text: My preferences
- button:
  - img
- heading "Closed" [level=2]:
  - text: Closed
  - button:
    - img
- text: Newest
- combobox
- button
- img
- searchbox "Name, email or messages": Cecilia O'Connell
- button "Close search"
- button "Cecilia O'Connell a few seconds ago Aequitas templum umbra armarium debitis tonsor cultellus vinitor decipio tabgo."
- paragraph: Cecilia O'Connell
- textbox "Add ticket title"
- button
- paragraph:
  - text: This ticket started at
  - link "unknown":
    - /url: https://neeto.com/neetochat
  - text: a few seconds ago
- paragraph:
  - text: The ticket has been closed by AndrÃ© O'Reilly.
  - button "Click here"
  - text: to reopen. a few seconds ago
- img
- text: Aequitas templum umbra armarium debitis tonsor cultellus vinitor decipio tabgo. a few seconds ago. Seen. Auto reply
- textbox "editor-content":
  - paragraph: Type @ to mention a user.
- button "Note"
- button
- button
- button "Add note" [disabled]
- heading "Details" [level=5]
- paragraph: Status
- paragraph: Closed
- img
- paragraph: Priority
- heading "Low" [level=5]
- img
- paragraph: Group
- heading "--" [level=5]
- img
- paragraph: Assignee
- heading "--" [level=5]
- img
- img
- paragraph: Cecilia O'Connell
- button
- img
- paragraph: beverly.gutkowski-windler17@example.com
- button
- img
- paragraph: "-"
- button
- img
- paragraph: Asia/Kolkata
- img
- paragraph: Windows
- img
- paragraph: Chrome
- button "View more"
- button "Create NeetoDesk ticket"
- heading "Tags" [level=5]:
  - heading "Tags" [level=5]
- button
- heading "Notes" [level=5]:
  - heading "Notes" [level=5]
- button
- heading "Keyboard shortcuts" [level=4]
- button
- heading "GLOBAL" [level=6]
- paragraph: See keyboard shortcuts
- text: shift /
- paragraph: Close modals, panes
- text: esc
- paragraph: Submit form or text input
- text: ctrl enter
- heading "NeetoChat specific" [level=6]
- paragraph: Close ticket
- text: ctrl alt y
- paragraph: Add canned responses
- text: ctrl alt r
- paragraph: Attach NeetoKB article
- text: ctrl alt a
- paragraph: Add gif
- text: ctrl alt g
- paragraph: Add image
- text: ctrl alt k
- paragraph: Add video
- text: ctrl alt v
- paragraph: Switch to chat(while typing in note)
- text: ctrl alt c
- paragraph: Switch to note(while typing in chat)
- text: ctrl alt n
- paragraph: Save title
- text: enter
- paragraph: Cancel edit
- text: esc
- heading "Workflow builder" [level=6]
- paragraph: Delete node or edge(based on selection)
- text: Delete
- paragraph: Save new button label(while renaming button)
- text: enter
- paragraph: Cancel button renaming
- text: esc
```

# Test source

```ts
  203 |
  204 |       await this.page
  205 |         .getByTestId(CONVERSATIONS_SELECTORS.priorityListItem)
  206 |         .filter({ hasText: priorities[priorityNumber] })
  207 |         .click();
  208 |     }
  209 |   };
  210 |
  211 |   verifyConversationOrder = async ({
  212 |     orderBy,
  213 |     sortBy,
  214 |     contactNames,
  215 |   }: VerifyConversationOrderProps) => {
  216 |     const conversationList = await this.fetchConversationListViaRequest({
  217 |       orderBy,
  218 |       sortBy,
  219 |     });
  220 |
  221 |     const filteredConversations = conversationList.conversations.filter(
  222 |       conversation => contactNames.includes(conversation.visitor.name)
  223 |     );
  224 |
  225 |     const filteredConversationTitles = filteredConversations.map(
  226 |       conversation => conversation.visitor.name
  227 |     );
  228 |
  229 |     const uiFilteredConversationTitles =
  230 |       await this.filterConversationTitleByContactNames({
  231 |         contactNames,
  232 |       });
  233 |
  234 |     expect(filteredConversationTitles).toStrictEqual(
  235 |       uiFilteredConversationTitles
  236 |     );
  237 |   };
  238 |
  239 |   sendMessage = async (message: string) => {
  240 |     const textareaDiv = this.page.getByTestId(commonSelectors.neetoEditor);
  241 |     await textareaDiv.click();
  242 |
  243 |     //TODO: Replace with .fill() after https://github.com/bigbinary/neeto-editor/issues/980 is closed.
  244 |     await this.page
  245 |       .getByTestId(commonSelectors.neetoEditor)
  246 |       .pressSequentially(message);
  247 |
  248 |     await this.page
  249 |       .getByTestId(CONVERSATIONS_SELECTORS.sendMessageButton)
  250 |       .click();
  251 |   };
  252 |
  253 |   verifyMessageExistence = (message: string) =>
  254 |     expect(
  255 |       this.page
  256 |         .getByTestId(CONVERSATIONS_SELECTORS.inboxBody)
  257 |         .filter({ hasText: message })
  258 |     ).toBeVisible({ timeout: 20_000 });
  259 |
  260 |   verifyPreviewMessage = ({
  261 |     contactName,
  262 |     message,
  263 |   }: VerifyPreviewMessageProps) =>
  264 |     expect(
  265 |       this.page
  266 |         .getByTestId(CONVERSATIONS_SELECTORS.conversations)
  267 |         .filter({ hasText: contactName })
  268 |         .getByTestId(CONVERSATIONS_SELECTORS.latestMessagePreview)
  269 |     ).toHaveText(message, { timeout: 10_000 });
  270 |
  271 |   openConversation = async ({ contactName }: OpenConversationProps) => {
  272 |     const conversation = this.page
  273 |       .getByTestId(CONVERSATIONS_SELECTORS.conversations)
  274 |       .filter({ hasText: contactName });
  275 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  276 |     const isConversationExists = await conversation.isVisible();
  277 |     if (!isConversationExists) {
  278 |       await this.searchConversationAndVerify({ searchTerm: contactName });
  279 |     }
  280 |     await expect(conversation).toBeVisible({ timeout: 10_000 });
  281 |     await conversation.click();
  282 |   };
  283 |
  284 |   changeConversationStatus = async ({
  285 |     status,
  286 |   }: ChangeConversationStatusProps) => {
  287 |     await this.page
  288 |       .getByTestId(CONVERSATIONS_SELECTORS.conversationStatusDropdown)
  289 |       .click();
  290 |
  291 |     await this.page
  292 |       .getByTestId(STATUS_OPTIONS.inboxStatusOption(status))
  293 |       .click();
  294 |   };
  295 |
  296 |   verifyConversationExistence = async ({
  297 |     contactName,
  298 |   }: VerifyConversationExistenceProps) => {
  299 |     await expect(
  300 |       this.page
  301 |         .getByTestId(CONVERSATIONS_SELECTORS.conversationTitle)
  302 |         .filter({ hasText: contactName })
> 303 |     ).toBeVisible();
      |       ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  304 |   };
  305 |
  306 |   searchConversationAndVerify = async ({
  307 |     searchTerm,
  308 |   }: SearchConversationProps) => {
  309 |     const searchConversationInput = this.page.getByTestId(
  310 |       CONVERSATIONS_SELECTORS.searchConversationTextField
  311 |     );
  312 |     if (!(await searchConversationInput.isVisible())) {
  313 |       await this.page
  314 |         .getByTestId(CONVERSATIONS_SELECTORS.searchConversationButton)
  315 |         .click();
  316 |     }
  317 |
  318 |     await searchConversationInput.fill(searchTerm);
  319 |
  320 |     await expect(
  321 |       this.page
  322 |         .getByTestId(CONVERSATIONS_SELECTORS.conversations)
  323 |         .filter({ hasText: searchTerm })
  324 |     ).toBeVisible();
  325 |   };
  326 |
  327 |   searchConversationViaConversationTitleAndVerify = async ({
  328 |     searchTerm,
  329 |     conversationTitle,
  330 |   }: SearchConversationProps) => {
  331 |     const searchConversationInput = this.page.getByTestId(
  332 |       CONVERSATIONS_SELECTORS.searchConversationTextField
  333 |     );
  334 |     if (!(await searchConversationInput.isVisible())) {
  335 |       await this.page
  336 |         .getByTestId(CONVERSATIONS_SELECTORS.searchConversationButton)
  337 |         .click();
  338 |     }
  339 |
  340 |     await searchConversationInput.fill(searchTerm);
  341 |
  342 |     await expect(
  343 |       this.page
  344 |         .getByTestId(CONVERSATIONS_SELECTORS.conversations)
  345 |         .filter({ hasText: conversationTitle })
  346 |     ).toBeVisible();
  347 |   };
  348 |
  349 |   addTagAndVerify = async (tagName: string) => {
  350 |     await this.page.getByTestId(TAGS_SELECTORS.addTagButton).click();
  351 |     await this.page.getByTestId(TAGS_SELECTORS.tagSearchField).fill(tagName);
  352 |
  353 |     await this.page.getByTestId(COMMON_SELECTORS.selectOption(tagName)).click();
  354 |
  355 |     await expect(this.page.getByTestId(COMMON_SELECTORS.spinner)).toBeHidden();
  356 |     await expect(
  357 |       this.page.getByTestId(TAGS_SELECTORS.tagContainer)
  358 |     ).toContainText(tagName);
  359 |   };
  360 |
  361 |   addTagToContactAndVerify = async (tagName: string, visitorName: string) => {
  362 |     await this.page.getByTestId(NAV_LINKS.contactTab).click();
  363 |     await this.page.getByTestId(COMMON_SELECTORS.inputField).fill(visitorName);
  364 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  365 |
  366 |     await this.page
  367 |       .getByTestId(CONTACTS_SELECTOR.contactNameField)
  368 |       .filter({ hasText: visitorName })
  369 |       .click();
  370 |
  371 |     await this.addTagAndVerify(tagName);
  372 |   };
  373 |
  374 |   removeTag = async (tagName: string) => {
  375 |     await this.page
  376 |       .getByTestId(TAGS_SELECTORS.tagContainer)
  377 |       .filter({ hasText: tagName })
  378 |       .getByTestId(TAGS_SELECTORS.deleteTagButton)
  379 |       .click();
  380 |     await expect(this.page.getByTestId(COMMON_SELECTORS.spinner)).toBeHidden();
  381 |     await this.page.reload();
  382 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  383 |   };
  384 |
  385 |   createAndAddCustomTagAndVerify = async (tagName: string) => {
  386 |     await this.page.getByTestId(TAGS_SELECTORS.addTagButton).click();
  387 |     await this.page.getByTestId(TAGS_SELECTORS.tagSearchField).fill(tagName);
  388 |
  389 |     await this.page
  390 |       .getByTestId(COMMON_SELECTORS.dropdownMenu)
  391 |       .filter({ hasText: TAGS.customTag(tagName) })
  392 |       .click();
  393 |
  394 |     await expect(
  395 |       this.page.getByTestId(TAGS_SELECTORS.tagContainer)
  396 |     ).toContainText(tagName);
  397 |   };
  398 |
  399 |   goToChatPage = async () => {
  400 |     await this.page.goto(ROUTES.inbox.open, { waitUntil: "load" });
  401 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  402 |   };
  403 | }
```