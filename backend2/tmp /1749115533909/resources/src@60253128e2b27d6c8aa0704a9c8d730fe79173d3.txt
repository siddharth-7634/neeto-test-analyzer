import { COMMON_SELECTORS, CustomCommands } from "@neetoplaywright";
import { Page, expect } from "@playwright/test";
import { SETTINGS_SELECTORS } from "@selectors";
import { TFunction } from "i18next";
import { getI18nInstance } from "playwright-i18next-fixture";

export default class AutomationRulesPage {
  page: Page;
  neetoPlaywrightUtilities: CustomCommands;
  t: TFunction;
  constructor(page: Page, neetoPlaywrightUtilities: CustomCommands) {
    this.page = page;
    this.neetoPlaywrightUtilities = neetoPlaywrightUtilities;
    this.t = getI18nInstance().t;
  }

  addSlackAutomationRuleAndVerify = async ({
    name,
    channel = this.t("common.general"),
  }: {
    name: string;
    channel?: string;
  }) => {
    await expect(this.page.getByTestId(COMMON_SELECTORS.pageLoader)).toBeHidden(
      { timeout: 10_000 }
    );

    await this.page
      .getByTestId(
        SETTINGS_SELECTORS.automationRule.automationRulesSettingsLink
      )
      .click();

    await this.page
      .getByTestId(SETTINGS_SELECTORS.automationRule.newButton)
      .click();

    await this.page
      .getByRole("radio", { name: this.t("visitor.convs") })
      .click();

    await this.page
      .getByTestId(SETTINGS_SELECTORS.automationRule.nameInputField)
      .pressSequentially(name, { delay: 10 });

    await expect(
      this.page.getByTestId(COMMON_SELECTORS.nameInputError)
    ).toBeHidden();

    await expect(async () => {
      const conditionMultiSelectField = this.page.getByTestId(
        SETTINGS_SELECTORS.automationRule.conditionMultiSelectField
      );
      await conditionMultiSelectField.click();
      await this.page
        .getByTestId(COMMON_SELECTORS.dropdownContainer)
        .getByTestId(
          SETTINGS_SELECTORS.automationRule.conversationIsCreatedItem
        )
        .click();

      await expect(conditionMultiSelectField).toContainText(
        this.t("automation.events.created"),
        { ignoreCase: true }
      );
    }).toPass({ timeout: 35_000 });

    await this.page
      .getByTestId(SETTINGS_SELECTORS.automationRule.actionDropdownButton)
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.dropdownContainer)
      .getByTestId(SETTINGS_SELECTORS.automationRule.messageToSlackItem)
      .click();

    await this.page
      .getByTestId(SETTINGS_SELECTORS.automationRule.actionDropdownButton)
      .filter({ hasText: this.t("automation.common.selectChannel") })
      .click();

    await this.page
      .getByTestId(SETTINGS_SELECTORS.automationRule.slackChannelItem(channel))
      .click();
    await this.page.getByTestId(COMMON_SELECTORS.saveChangesButton).click();

    await this.page
      .getByRole("cell", { name })
      .getByTestId(COMMON_SELECTORS.dropdownIcon)
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.dropdownContainer)
      .getByText(this.t("common.edit"))
      .click();

    await this.page.reload();
    await this.page.waitForLoadState();

    await expect(this.page.getByTestId(COMMON_SELECTORS.pageLoader)).toBeHidden(
      { timeout: 20_000 }
    );

    await expect(
      this.page
        .getByTestId(SETTINGS_SELECTORS.automationRule.actionDropdownButton)
        .filter({ hasText: channel })
    ).toBeVisible();

    await this.page.getByTestId(COMMON_SELECTORS.cancelButton).click();
  };

  deleteAutomationRule = async (ruleName: string) => {
    await expect(this.page.getByTestId(COMMON_SELECTORS.pageLoader)).toBeHidden(
      { timeout: 10_000 }
    );

    await this.page
      .getByTestId(
        SETTINGS_SELECTORS.automationRule.automationRulesSettingsLink
      )
      .click();

    await expect(this.page.getByTestId(COMMON_SELECTORS.pageLoader)).toBeHidden(
      { timeout: 10_000 }
    );

    await this.page
      .getByRole("cell", { name: ruleName })
      .getByTestId(COMMON_SELECTORS.dropdownIcon)
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.dropdownContainer)
      .getByText(this.t("common.delete"))
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.alertModalSubmitButton)
      .click();
  };
}
