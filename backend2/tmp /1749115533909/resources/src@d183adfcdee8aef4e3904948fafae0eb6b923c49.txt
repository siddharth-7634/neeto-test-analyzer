import { REDIRECT_CALLBACK_ROUTES, ROUTES } from "@constants/routes";
import { SLACK_AUTOMATION_RULE_NAME } from "@constants/texts/settings";
import { faker } from "@faker-js/faker";
import test from "@fixtures/stealth";
import { MemberApis, skipTest, SLACK_SELECTORS } from "@neetoplaywright";
import { Visitor } from "@types";
import { Page, expect, Locator } from "playwright/test";

test.describe("Verify Slack integration", () => {
  skipTest.forAllExceptStagingEnv();

  let slackWebappPage: Page;
  let conversationId: string;

  const contact: Visitor = {
    email: faker.internet.exampleEmail(),
    name: faker.person.fullName(),
    visitorToken: faker.string.uuid(),
  };

  test.beforeEach(
    async ({
      slackPage,
      page,
      automationRulesPage,
      context,
      t,
      contactApis,
    }) => {
      await test.step("Step 1: Create a new contact user", () =>
        contactApis.createContact(contact)
      );

      await test.step(
        "Step 2: Login to Slack and open WebApp in new tab",
        async () => {
          slackWebappPage = await context.newPage();
          await slackPage.loginToSlackWebapp(slackWebappPage);
        }
      );

      await test.step(
        "Step 3: Connect Slack integration and verify",
        async () => {
          const customSteps = async () => {
            await expect(
              page.getByText(
                t("settings.integrations.slack.finish.integrationUsageInfo")
              )
            ).toBeVisible();

            await page
              .getByRole("button", { name: t("neetoSlack.common.done") })
              .click();
          };

          await slackPage.connectAndVerifyIntegration(
            REDIRECT_CALLBACK_ROUTES.slack,
            customSteps
          );
        }
      );

      await test.step(
        "Step 4: Create automation rule to send messages to Slack channel",
        async () => {
          await page.goto(ROUTES.settings.index);
          await automationRulesPage.addSlackAutomationRuleAndVerify({
            name: SLACK_AUTOMATION_RULE_NAME,
          });
        }
      );
    }
  );

  test.afterEach(
    async ({
      contactApis,
      automationRulesPage,
      slackPage,
      conversationsPage,
      page,
    }) => {
      await page.goto(ROUTES.settings.index);
      await automationRulesPage.deleteAutomationRule(
        SLACK_AUTOMATION_RULE_NAME
      );

      const conversationData =
        await conversationsPage.fetchConversationViaRequest({ conversationId });
      const contactId = conversationData.conversation.metadata.visitor.id;
      await contactApis.deleteContacts({ contactIds: [contactId] });

      await slackPage.disconnectAndVerifyIntegration();
      await slackPage.logoutFromSlackWebApp();

      await slackWebappPage.close();
    }
  );

  test("should verify Slack message is send via automation rule", async ({
    conversationsPage,
    membersPage,
    page,
    conversationsApis,
    neetoPlaywrightUtilities,
  }) => {
    let mainSlackMessage: Locator;
    let newAgentId: string;

    const tagName = faker.word.words(1);
    const newAgent = {
      email: faker.internet.exampleEmail(),
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      fullName: faker.person.fullName(),
      appName: "neetoChat",
      role: "Agent",
    };

    await test.step("Step 5: Create conversation for contact", async () => {
      await page.goto(ROUTES.inbox.open);

      await conversationsApis.createWidgetConversation({
        visitorToken: contact.visitorToken,
      });

      await conversationsPage.openConversationFromList(contact.name);
      conversationId = conversationsPage.getQueryParamsValue({
        queryParamKey: "selected_conversation_id",
      });
    });

    await test.step(
      "Step 6: Verify Slack main message is received in the channel",
      async () => {
        mainSlackMessage = slackWebappPage.locator(
          SLACK_SELECTORS.messageContainer,
          { hasText: contact.name }
        );

        await expect(mainSlackMessage).toBeVisible();
      }
    );

    await test.step(
      "Step 7: Update conversation details and verify messages in Slack channel",
      async () => {
        await membersPage.addMembersViaRequest([newAgent]);

        const memberApis = new MemberApis(neetoPlaywrightUtilities);
        const agentResponse = await memberApis.fetch(newAgent);

        const responseBody = await agentResponse.json();

        newAgentId = responseBody?.members?.[0]?.id;

        await conversationsPage.createAndAddCustomTagAndVerify(tagName);

        await conversationsApis.updateWidgetConversation(conversationId, {
          status: "on_hold",
          moved_to_closed: false,
          priority: "high",
          user_id: newAgentId,
        });

        await mainSlackMessage.locator(SLACK_SELECTORS.replyBar).click();
        const threadReplySidebar = slackWebappPage.locator(
          SLACK_SELECTORS.threadsFlexpane
        );

        await expect(
          slackWebappPage.getByRole("img", { name: "Loading thread" })
        ).toBeHidden();

        await Promise.all(
          [
            RegExp("changed the status from(.*)to On hold"),
            RegExp("updated the priority from(.*)to high", "i"),
            RegExp(
              `This conversation has been assigned to ${newAgent.firstName}`,
              "i"
            ),
            RegExp(`added the tag ${tagName}`, "i"),
          ].map(async text => {
            const messageBlock = threadReplySidebar.locator(
              SLACK_SELECTORS.markdownElement,
              { hasText: text }
            );

            await messageBlock.scrollIntoViewIfNeeded();
            await expect(messageBlock).toBeVisible();
          })
        );
      }
    );

    await test.step("Step 8: Deactivate newly created agent", () =>
      membersPage.deactivateMemberViaRequest(newAgent.email)
    );
  });
});
