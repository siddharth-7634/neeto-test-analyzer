# Test info

- Name: Verify Slack integration >> should verify Slack message is send via automation rule
- Location: /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/integrations/slack.spec.ts:101:7

# Error details

```
TimeoutError: locator.click: Timeout 10000ms exceeded.
Call log:
  - waiting for getByTestId('connect-button')

    at SlackPage.IntegrationBase.connect (/home/neetoci/neeto-chat-web/playwright-tests/node_modules/@bigbinary/neeto-playwright-commons/build/compiled/poms/integrations/integrationBase.js:25:78)
    at SlackPage.connectAndVerifyIntegration (/home/neetoci/neeto-chat-web/playwright-tests/node_modules/@bigbinary/neeto-playwright-commons/build/compiled/poms/integrations/slack.js:29:13)
    at /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/integrations/slack.spec.ts:57:11
    at /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/integrations/slack.spec.ts:42:7
```

# Page snapshot

```yaml
- button "AO":
  - paragraph: AO
  - img
- link:
  - /url: /
  - img
- button
- text: / Admin panel
- link "Widget":
  - /url: /admin/admin-panel?category=widget_settings
- link "Installation":
  - /url: /admin/admin-panel/widget/installation
- link "Customize":
  - /url: /admin/admin-panel/widget/customize/general
- link "Chat questions":
  - /url: /admin/admin-panel/widget/chat-surveys/pre-chat
- link "Visibility":
  - /url: /admin/admin-panel/widget/visibility-settings
- separator
- link "General":
  - /url: /admin/admin-panel?category=general_settings
- link "Automation rules":
  - /url: /admin/admin-panel/general/automation
- link "Ticket tags":
  - /url: /admin/admin-panel/general/chat-tags
- link "Contact tags":
  - /url: /admin/admin-panel/general/contact-tags
- link "Canned responses":
  - /url: /admin/admin-panel/general/canned-responses
- link "Business hours":
  - /url: /admin/admin-panel/general/business-hours
- link "Views":
  - /url: /admin/admin-panel/general/views
- link "IP Restriction":
  - /url: /admin/admin-panel/general/ip-restriction
- link "Roles":
  - /url: /admin/admin-panel/general/roles
- link "Audit logs":
  - /url: /admin/admin-panel/general/audit-logs
- link "API keys":
  - /url: /admin/admin-panel/general/api-keys
- link "Contact fields":
  - /url: /admin/admin-panel/general/contact-fields
- link "Ticket fields":
  - /url: /admin/admin-panel/general/ticket-fields
- link "Taxonomy":
  - /url: /admin/admin-panel/general/taxonomy
- separator
- link "Chatbot":
  - /url: /admin/admin-panel?category=chatbot_settings
- link "Workflows":
  - /url: /admin/admin-panel/chatbot/workflows
- link "APIs":
  - /url: /admin/admin-panel/chatbot/apis
- link "Mapped fields":
  - /url: /admin/admin-panel/chatbot/mapped-fields
- separator
- link "Member":
  - /url: /admin/admin-panel?category=member_settings
- link "Groups":
  - /url: /admin/admin-panel/member/groups
- link "Status":
  - /url: /admin/admin-panel/member/agent-statuses
- link "Member notifications":
  - /url: /admin/admin-panel/member/member-notifications
- separator
- link "Integrations":
  - /url: /admin/admin-panel?category=integrations
- link "Slack":
  - /url: /admin/admin-panel/integrations/slack
- link "Instagram":
  - /url: /admin/admin-panel/integrations/instagram
- link "Microsoft Teams":
  - /url: /admin/admin-panel/integrations/teams
- link "Whatsapp":
  - /url: /admin/admin-panel/integrations/whatsapp
- link "Zapier":
  - /url: /admin/admin-panel/integrations/zapier
- link "GitHub":
  - /url: /admin/admin-panel/integrations/github
- link "Webhooks":
  - /url: /admin/admin-panel/integrations/webhooks
- separator
- link "Outbound notifications":
  - /url: /admin/admin-panel?category=outbound_notifications
- link "Visitor notification of unread messages":
  - /url: /admin/admin-panel/outbound/outbound-notifications
- button:
  - img
- link "Admin panel":
  - /url: /admin/admin-panel
- text: /
- link "General":
  - /url: /admin/admin-panel?category=general_settings
- text: /
- link "Automation rules":
  - /url: /admin/admin-panel/general/automation
- heading "Automation rules" [level=1]:
  - text: Automation rules
  - button:
    - img
- img
- searchbox "Search automation rules"
- link "Add new rule":
  - /url: /admin/admin-panel/general/automation/new
- heading "4 automation rules" [level=4]
- table:
  - rowgroup:
    - row "Name Description Active Apply on":
      - columnheader "Name":
        - text: Name
        - button
      - columnheader "Description":
        - text: Description
        - button
      - columnheader "Active":
        - text: Active
        - button
      - columnheader "Apply on":
        - text: Apply on
        - button
- table:
  - rowgroup:
    - row "[Status Update] - Mark as Open - Conversations":
      - cell "[Status Update] - Mark as Open":
        - button "[Status Update] - Mark as Open"
        - button
      - cell "-":
        - paragraph: "-"
      - cell:
        - checkbox [checked]
      - cell "Conversations"
    - row "Create a ticket if agents are offline - Widget":
      - cell "Create a ticket if agents are offline":
        - button "Create a ticket if agents are offline"
        - button
      - cell "-":
        - paragraph: "-"
      - cell:
        - checkbox
      - cell "Widget"
    - row "Proactive invitation on every page - Widget":
      - cell "Proactive invitation on every page":
        - button "Proactive invitation on every page"
        - button
      - cell "-":
        - paragraph: "-"
      - cell:
        - checkbox
      - cell "Widget"
    - row "Proactive System during business hours. - Widget":
      - cell "Proactive System during business hours.":
        - button "Proactive System during business hours."
        - button
      - cell "-":
        - paragraph: "-"
      - cell:
        - checkbox
      - cell "Widget"
- heading "Keyboard shortcuts" [level=4]
- button
- heading "GLOBAL" [level=6]
- paragraph: See keyboard shortcuts
- text: shift /
- paragraph: Close modals, panes
- text: esc
- paragraph: Submit form or text input
- text: ctrl enter
- heading "NeetoChat specific" [level=6]
- paragraph: Close ticket
- text: ctrl alt y
- paragraph: Add canned responses
- text: ctrl alt r
- paragraph: Attach NeetoKB article
- text: ctrl alt a
- paragraph: Add gif
- text: ctrl alt g
- paragraph: Add image
- text: ctrl alt k
- paragraph: Add video
- text: ctrl alt v
- paragraph: Switch to chat(while typing in note)
- text: ctrl alt c
- paragraph: Switch to note(while typing in chat)
- text: ctrl alt n
- paragraph: Save title
- text: enter
- paragraph: Cancel edit
- text: esc
- heading "Workflow builder" [level=6]
- paragraph: Delete node or edge(based on selection)
- text: Delete
- paragraph: Save new button label(while renaming button)
- text: enter
- paragraph: Cancel button renaming
- text: esc
```

# Test source

```ts
   1 | import { REDIRECT_CALLBACK_ROUTES, ROUTES } from "@constants/routes";
   2 | import { SLACK_AUTOMATION_RULE_NAME } from "@constants/texts/settings";
   3 | import { faker } from "@faker-js/faker";
   4 | import test from "@fixtures/stealth";
   5 | import { MemberApis, skipTest, SLACK_SELECTORS } from "@neetoplaywright";
   6 | import { Visitor } from "@types";
   7 | import { Page, expect, Locator } from "playwright/test";
   8 |
   9 | test.describe("Verify Slack integration", () => {
   10 |   skipTest.forAllExceptStagingEnv();
   11 |
   12 |   let slackWebappPage: Page;
   13 |   let conversationId: string;
   14 |
   15 |   const contact: Visitor = {
   16 |     email: faker.internet.exampleEmail(),
   17 |     name: faker.person.fullName(),
   18 |     visitorToken: faker.string.uuid(),
   19 |   };
   20 |
   21 |   test.beforeEach(
   22 |     async ({
   23 |       slackPage,
   24 |       page,
   25 |       automationRulesPage,
   26 |       context,
   27 |       t,
   28 |       contactApis,
   29 |     }) => {
   30 |       await test.step("Step 1: Create a new contact user", () =>
   31 |         contactApis.createContact(contact)
   32 |       );
   33 |
   34 |       await test.step(
   35 |         "Step 2: Login to Slack and open WebApp in new tab",
   36 |         async () => {
   37 |           slackWebappPage = await context.newPage();
   38 |           await slackPage.loginToSlackWebapp(slackWebappPage);
   39 |         }
   40 |       );
   41 |
   42 |       await test.step(
   43 |         "Step 3: Connect Slack integration and verify",
   44 |         async () => {
   45 |           const customSteps = async () => {
   46 |             await expect(
   47 |               page.getByText(
   48 |                 t("settings.integrations.slack.finish.integrationUsageInfo")
   49 |               )
   50 |             ).toBeVisible();
   51 |
   52 |             await page
   53 |               .getByRole("button", { name: t("neetoSlack.common.done") })
   54 |               .click();
   55 |           };
   56 |
>  57 |           await slackPage.connectAndVerifyIntegration(
      |           ^ TimeoutError: locator.click: Timeout 10000ms exceeded.
   58 |             REDIRECT_CALLBACK_ROUTES.slack,
   59 |             customSteps
   60 |           );
   61 |         }
   62 |       );
   63 |
   64 |       await test.step(
   65 |         "Step 4: Create automation rule to send messages to Slack channel",
   66 |         async () => {
   67 |           await page.goto(ROUTES.settings.index);
   68 |           await automationRulesPage.addSlackAutomationRuleAndVerify({
   69 |             name: SLACK_AUTOMATION_RULE_NAME,
   70 |           });
   71 |         }
   72 |       );
   73 |     }
   74 |   );
   75 |
   76 |   test.afterEach(
   77 |     async ({
   78 |       contactApis,
   79 |       automationRulesPage,
   80 |       slackPage,
   81 |       conversationsPage,
   82 |       page,
   83 |     }) => {
   84 |       await page.goto(ROUTES.settings.index);
   85 |       await automationRulesPage.deleteAutomationRule(
   86 |         SLACK_AUTOMATION_RULE_NAME
   87 |       );
   88 |
   89 |       const conversationData =
   90 |         await conversationsPage.fetchConversationViaRequest({ conversationId });
   91 |       const contactId = conversationData.conversation.metadata.visitor.id;
   92 |       await contactApis.deleteContacts({ contactIds: [contactId] });
   93 |
   94 |       await slackPage.disconnectAndVerifyIntegration();
   95 |       await slackPage.logoutFromSlackWebApp();
   96 |
   97 |       await slackWebappPage.close();
   98 |     }
   99 |   );
  100 |
  101 |   test("should verify Slack message is send via automation rule", async ({
  102 |     conversationsPage,
  103 |     membersPage,
  104 |     page,
  105 |     conversationsApis,
  106 |     neetoPlaywrightUtilities,
  107 |   }) => {
  108 |     let mainSlackMessage: Locator;
  109 |     let newAgentId: string;
  110 |
  111 |     const tagName = faker.word.words(1);
  112 |     const newAgent = {
  113 |       email: faker.internet.exampleEmail(),
  114 |       firstName: faker.person.firstName(),
  115 |       lastName: faker.person.lastName(),
  116 |       fullName: faker.person.fullName(),
  117 |       appName: "neetoChat",
  118 |       role: "Agent",
  119 |     };
  120 |
  121 |     await test.step("Step 5: Create conversation for contact", async () => {
  122 |       await page.goto(ROUTES.inbox.open);
  123 |
  124 |       await conversationsApis.createWidgetConversation({
  125 |         visitorToken: contact.visitorToken,
  126 |       });
  127 |
  128 |       await conversationsPage.openConversationFromList(contact.name);
  129 |       conversationId = conversationsPage.getQueryParamsValue({
  130 |         queryParamKey: "selected_conversation_id",
  131 |       });
  132 |     });
  133 |
  134 |     await test.step(
  135 |       "Step 6: Verify Slack main message is received in the channel",
  136 |       async () => {
  137 |         mainSlackMessage = slackWebappPage.locator(
  138 |           SLACK_SELECTORS.messageContainer,
  139 |           { hasText: contact.name }
  140 |         );
  141 |
  142 |         await expect(mainSlackMessage).toBeVisible();
  143 |       }
  144 |     );
  145 |
  146 |     await test.step(
  147 |       "Step 7: Update conversation details and verify messages in Slack channel",
  148 |       async () => {
  149 |         await membersPage.addMembersViaRequest([newAgent]);
  150 |
  151 |         const memberApis = new MemberApis(neetoPlaywrightUtilities);
  152 |         const agentResponse = await memberApis.fetch(newAgent);
  153 |
  154 |         const responseBody = await agentResponse.json();
  155 |
  156 |         newAgentId = responseBody?.members?.[0]?.id;
  157 |
```