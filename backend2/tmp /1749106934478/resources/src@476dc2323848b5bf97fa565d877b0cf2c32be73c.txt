import {
  COMMON_SELECTORS,
  CustomCommands,
  filterUtils,
  NEETO_FILTERS_SELECTORS,
} from "@neetoplaywright";
import { Page, expect } from "@playwright/test";
import { TFunction } from "i18next";
import { getI18nInstance } from "playwright-i18next-fixture";

import { PROJECT_SELECTORS } from "@constants/selectors";

import { AddProjectViaUIProps, TimePeriodTypes } from "./types";

export default class ProjectPage {
  page: Page;
  neetoPlaywrightUtilities: CustomCommands;
  t: TFunction;
  constructor(page: Page, neetoPlaywrightUtilities: CustomCommands) {
    this.page = page;
    this.neetoPlaywrightUtilities = neetoPlaywrightUtilities;
    this.t = getI18nInstance().t;
  }

  addProjectViaUI = async ({
    projectName,
    billingMethod,
  }: AddProjectViaUIProps) => {
    await this.page
      .getByTestId(PROJECT_SELECTORS.nameTextField)
      .fill(projectName);

    const billingMethodElement = this.page.getByTestId(
      PROJECT_SELECTORS.billingMethodSelectContainer
    );
    await billingMethodElement.fill(billingMethod);
    await this.page.keyboard.press("Enter");
  };

  searchProjectAndVerify = async (projectName: string) => {
    await expect(this.page.getByTestId(COMMON_SELECTORS.heading)).toBeVisible();
    const searchInput = this.page.getByTestId(COMMON_SELECTORS.inputField);

    await searchInput.fill(projectName);
    await this.neetoPlaywrightUtilities.waitForPageLoad();
    await this.verifyProjectInTable(projectName);
  };

  getProjectIdFromUrl = () => new URL(this.page.url()).pathname.split("/")[2];

  archiveProject = async () => {
    await this.page.getByTestId(COMMON_SELECTORS.dropdownIcon).click();
    await this.page
      .getByTestId(COMMON_SELECTORS.dropdownContainer)
      .getByRole("button", { name: this.t("common.archive") })
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.alertModalSubmitButton)
      .click();
    await this.neetoPlaywrightUtilities.waitForPageLoad();
  };

  archiveProjectViaDashboard = async ({
    projectName,
    goToProjectIndex = true,
  }: {
    projectName: string;
    goToProjectIndex?: boolean;
  }) => {
    goToProjectIndex &&
      (await this.page.getByTestId(PROJECT_SELECTORS.navTab).click());
    await this.neetoPlaywrightUtilities.waitForPageLoad();
    await this.searchProjectAndVerify(projectName);

    await this.page
      .getByRole("cell", { name: projectName })
      .getByRole("button")
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.dropdownContainer)
      .getByRole("button", { name: this.t("common.archive") })
      .click();

    await this.page
      .getByTestId(COMMON_SELECTORS.alertModalSubmitButton)
      .click();

    await expect(this.page.getByRole("cell", { name: projectName })).toBeHidden(
      { timeout: 15_000 }
    );
  };

  autolockTimePeriod = async (timePeriod: TimePeriodTypes) => {
    await this.page
      .getByTestId(PROJECT_SELECTORS.autolockCheckboxInput)
      .check();
    if (timePeriod === this.t("forms.label.endOfMonth")) {
      await this.page
        .getByTestId(COMMON_SELECTORS.checkboxInput(timePeriod))
        .check();
    } else {
      await this.page
        .getByTestId(COMMON_SELECTORS.radioInput(timePeriod))
        .click();
    }
  };

  verifyProjectInTable = async (projectName: string) => {
    await Promise.all([
      expect(this.page.getByRole("cell", { name: projectName })).toBeVisible(),
      expect(
        this.page.getByTestId(COMMON_SELECTORS.subheaderText)
      ).toContainText(this.t("common.countOf.projects_one", { count: 1 })),
    ]);
  };

  private applyFilter = async () => {
    await expect(
      this.page.getByTestId(NEETO_FILTERS_SELECTORS.neetoFiltersBarClearButton)
    ).toBeVisible();

    await this.neetoPlaywrightUtilities.waitForPageLoad();
    await this.page
      .getByTestId(NEETO_FILTERS_SELECTORS.filterDoneButton)
      .click();
  };

  filterProjectByFilterLabels = async (label: string, value: string) => {
    await filterUtils.clearFiltersFromActionBlock(this.page);
    await filterUtils.openFilterPane(this.page);
    await this.neetoPlaywrightUtilities.selectOptionFromDropdown({
      label,
      value,
    });

    await this.applyFilter();
  };

  navigateToProjectPage = async () => {
    await this.page.getByTestId(PROJECT_SELECTORS.projectNavTab).click();
    await this.neetoPlaywrightUtilities.waitForPageLoad();
  };
}
