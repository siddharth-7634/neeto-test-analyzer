# Test info

- Name: Verify invoices >> should verify client receives invoice email and invoice link
- Location: /home/neetoci/neeto-invoice-web/playwright-tests/e2e/tests/invoice.spec.ts:28:7

# Error details

```
TimeoutError: locator.check: Timeout 10000ms exceeded.
Call log:
  - waiting for getByLabel('Frozen Ceramic Keyboard')

    at InvoicePage.startInvoiceCreation (/home/neetoci/neeto-invoice-web/playwright-tests/e2e/poms/invoices.ts:48:45)
    at /home/neetoci/neeto-invoice-web/playwright-tests/e2e/tests/invoice.spec.ts:49:5
```

# Page snapshot

```yaml
- button "AO":
  - paragraph: AO
  - img
- link:
  - /url: /
  - img
- link "Time tracking":
  - /url: /admin/time-tracking
  - img
  - text: Time tracking
- link "Projects":
  - /url: /admin/projects?primary_filter=active&search_term=Frozen%20Ceramic%20Keyboard
  - img
  - text: Projects
  - img
- link "Active 1":
  - /url: /admin/projects?primary_filter=active
- link "Archived 0":
  - /url: /admin/projects?primary_filter=archived
- link "All 1":
  - /url: /admin/projects?primary_filter=all
- link "Clients":
  - /url: /admin/clients?primary_filter=active
  - img
  - text: Clients
  - img
- link "Invoices":
  - /url: /admin/invoices
  - img
  - text: Invoices
  - img
- link "Reports":
  - /url: /admin/reports
  - img
  - text: Reports
  - img
- link "Team members":
  - /url: /admin/members
  - img
  - text: Team members
- link "Admin panel":
  - /url: /admin/admin-panel?category=general
  - img
  - text: Admin panel
- link "My preferences":
  - /url: /admin/my-preferences
  - img
  - text: My preferences
- button:
  - img
- heading "Active projects" [level=1]
- img
- searchbox "Search projects": Frozen Ceramic Keyboard
- link "Add new project":
  - /url: /admin/projects/new
- heading "0 projects" [level=4]
- button
- paragraph: "Search term:"
- paragraph: Contains
- paragraph: Frozen Ceramic Keyboard
- img
- button "Clear filters"
- heading "There are no active projects to show" [level=3]
- link "Add new project":
  - /url: /admin/projects/new
- heading "Keyboard shortcuts" [level=4]
- button
- heading "GLOBAL" [level=6]
- paragraph: See keyboard shortcuts
- text: shift /
- paragraph: Close modals, panes
- text: esc
- paragraph: Submit form or text input
- text: ctrl enter
- heading "CALENDAR" [level=6]
- paragraph: Go to next day
- text: right
- paragraph: Go to previous day
- text: left
```

# Test source

```ts
   1 | import {
   2 |   COMMON_SELECTORS,
   3 |   CustomCommands,
   4 |   MailerUtils,
   5 |   tableUtils,
   6 | } from "@neetoplaywright";
   7 | import { Page, expect } from "@playwright/test";
   8 | import { TFunction } from "i18next";
   9 | import { getI18nInstance } from "playwright-i18next-fixture";
   10 |
   11 | import { INVOICES_SELECTORS } from "@selectors";
   12 |
   13 | import {
   14 |   AddServiceEntryParams,
   15 |   InvoicePageConstructorParams,
   16 |   StartInvoiceCreationParams,
   17 |   VerifyInvoiceParams,
   18 | } from "./types";
   19 |
   20 | export default class InvoicePage {
   21 |   page: Page;
   22 |   mailerUtils: MailerUtils;
   23 |   neetoPlaywrightUtilities: CustomCommands;
   24 |   t: TFunction;
   25 |
   26 |   constructor({
   27 |     page,
   28 |     neetoPlaywrightUtilities,
   29 |     mailerUtils,
   30 |   }: InvoicePageConstructorParams) {
   31 |     this.page = page;
   32 |     this.neetoPlaywrightUtilities = neetoPlaywrightUtilities;
   33 |     this.mailerUtils = mailerUtils;
   34 |     this.t = getI18nInstance().t;
   35 |   }
   36 |
   37 |   startInvoiceCreation = async ({
   38 |     clientName,
   39 |     projectName,
   40 |   }: StartInvoiceCreationParams) => {
   41 |     await this.page.getByTestId(INVOICES_SELECTORS.navTab).click();
   42 |     await this.page.getByTestId(INVOICES_SELECTORS.addNewButton).click();
   43 |     await this.page.getByRole("link", { name: clientName }).click();
   44 |
   45 |     await expect(this.page.getByTestId(COMMON_SELECTORS.heading)).toHaveText(
   46 |       this.t("invoices.selectProjectAndInterval")
   47 |     );
>  48 |     await this.page.getByLabel(projectName).check();
      |                                             ^ TimeoutError: locator.check: Timeout 10000ms exceeded.
   49 |     await this.page
   50 |       .getByTestId(INVOICES_SELECTORS.projectAndIntervalProceedButton)
   51 |       .click();
   52 |   };
   53 |
   54 |   addServiceEntry = async ({
   55 |     quantity,
   56 |     price,
   57 |     notes,
   58 |     totalCost,
   59 |   }: AddServiceEntryParams) => {
   60 |     await this.page
   61 |       .getByRole("button", { name: this.t("invoices.serviceEntry.addNew") })
   62 |       .click();
   63 |
   64 |     await this.page
   65 |       .getByTestId(INVOICES_SELECTORS.serviceEntryTextField("notes"))
   66 |       .fill(notes);
   67 |
   68 |     await this.page
   69 |       .getByTestId(INVOICES_SELECTORS.serviceEntryTextField("quantity"))
   70 |       .fill(quantity);
   71 |
   72 |     await this.page
   73 |       .getByTestId(INVOICES_SELECTORS.serviceEntryTextField("unit-price"))
   74 |       .fill(price);
   75 |
   76 |     await expect(
   77 |       this.page.getByRole("heading", { name: totalCost })
   78 |     ).toBeVisible();
   79 |
   80 |     await this.page
   81 |       .getByTestId(INVOICES_SELECTORS.serviceEntrySaveChangesButton)
   82 |       .click();
   83 |   };
   84 |
   85 |   generateInvoice = async () => {
   86 |     await this.page
   87 |       .getByTestId(INVOICES_SELECTORS.generateInvoiceButton)
   88 |       .click();
   89 |
   90 |     await expect(
   91 |       this.page.getByTestId(COMMON_SELECTORS.pageLoader)
   92 |     ).toHaveCount(0);
   93 |   };
   94 |
   95 |   sendInvoiceAndGetLtsInvoice = async (clientName: string) => {
   96 |     await this.page
   97 |       .getByRole("button", { name: this.t("common.sendInvoice") })
   98 |       .click();
   99 |
  100 |     await expect(
  101 |       this.page.getByTestId(COMMON_SELECTORS.paneHeader)
  102 |     ).toContainText(this.t("invoice.send.title"));
  103 |
  104 |     await this.page
  105 |       .getByRole("button", { name: this.t("common.addNew.recipient") })
  106 |       .click();
  107 |
  108 |     const clientEmail = this.mailerUtils.generateRandomEmail();
  109 |     await this.page
  110 |       .getByTestId(INVOICES_SELECTORS.inputField("name"))
  111 |       .fill(clientName);
  112 |
  113 |     await this.page
  114 |       .getByTestId(INVOICES_SELECTORS.inputField("email"))
  115 |       .fill(clientEmail);
  116 |
  117 |     await this.page
  118 |       .getByRole("button", { name: this.t("common.saveRecipient") })
  119 |       .click();
  120 |
  121 |     await expect(
  122 |       this.page.getByTestId(
  123 |         INVOICES_SELECTORS.checkboxInput(`${clientName}-(${clientEmail})`)
  124 |       )
  125 |     ).toBeChecked();
  126 |
  127 |     const invoiceTrigger = new Date();
  128 |     await this.page
  129 |       .getByTestId(COMMON_SELECTORS.pane)
  130 |       .getByRole("button", { name: this.t("common.sendInvoice") })
  131 |       .click();
  132 |
  133 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  134 |
  135 |     const email = await this.mailerUtils.findMessage(
  136 |       { to: clientEmail },
  137 |       { timeout: 30_000, receivedAfter: invoiceTrigger }
  138 |     );
  139 |
  140 |     return email.text.links[1];
  141 |   };
  142 |
  143 |   verifyInvoice = async ({
  144 |     page = this.page,
  145 |     clientName,
  146 |     tableCells,
  147 |     totalCost,
  148 |   }: VerifyInvoiceParams) => {
```