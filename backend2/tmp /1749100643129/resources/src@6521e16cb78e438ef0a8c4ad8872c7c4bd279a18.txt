import { faker } from "@faker-js/faker";
import { BrowserContext, Page } from "@playwright/test";

import test from "@fixtures";

test.describe("Verify invoices", () => {
  let clientName: string, projectName: string;

  test.beforeEach(async ({ clientPage, projectPage, t }) => {
    clientName = faker.company.name();
    projectName = faker.commerce.productName();

    await test.step(
      "1: Navigate to clients page",
      clientPage.navigateToClientsTab
    );

    await test.step("2: Add a new client", () =>
      clientPage.addClientViaUI({ clientName }));

    await test.step("3: Add new project", () =>
      projectPage.addProjectViaUI({
        projectName,
        billingMethod: t("projects.hourlyRate"),
      }));
  });

  test("should verify client receives invoice email and invoice link", async ({
    invoicePage,
    browser,
  }) => {
    let newContext: BrowserContext;
    let newPage: Page;

    const notes = faker.string.alphanumeric(10);
    const quantity = faker.number.int({ min: 10, max: 30 });
    const price = faker.number.int({ min: 20, max: 120 });
    const vendor = faker.company.name();

    const totalCost = invoicePage.usdCurrencyFormat(quantity * price);

    const tableCells = [
      notes,
      invoicePage.usdCurrencyFormat(price),
      quantity.toString(),
      totalCost,
    ];

    await test.step("4: Start creating invoice", () =>
      invoicePage.startInvoiceCreation({ clientName, projectName }));

    await test.step("5: Add a service entry to invoice", () =>
      invoicePage.addServiceEntry({
        quantity: quantity.toString(),
        price: price.toString(),
        vendor,
        notes,
        totalCost,
      }));

    await test.step("6: Generate Invoice", invoicePage.generateInvoice);

    await test.step("7: Verify generated invoice", () =>
      invoicePage.verifyInvoice({ totalCost, clientName, tableCells }));

    const invoiceLink = await test.step("8: Send invoice to client", () =>
      invoicePage.sendInvoiceAndGetLtsInvoice(clientName));

    await test.step("9: Open LTS invoice link", async () => {
      newContext = await browser.newContext({
        storageState: { cookies: [], origins: [] },
      });
      newPage = await newContext.newPage();
      await newPage.goto(invoiceLink);
    });

    await test.step("10: Verify invoice received for client", () =>
      invoicePage.verifyInvoice({
        page: newPage,
        totalCost,
        clientName,
        tableCells,
      }));

    await test.step("11: Delete generated invoice", invoicePage.deleteInvoice);

    await test.step("12: Close client invoice page", async () => {
      await newPage.close();
      await newContext.close();
    });
  });

  test.afterEach(async ({ clientPage, projectPage, page }) => {
    await page.goto("/");
    await projectPage.archiveProjectViaDashboard({ projectName });

    await clientPage.navigateToClientsTab();
    await clientPage.archiveClientAndVerify(clientName);
  });
});
