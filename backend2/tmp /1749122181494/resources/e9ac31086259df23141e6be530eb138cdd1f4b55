# Test info

- Name: Inbox conversation page >> should verify name - add, edit from right sidebar
- Location: /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/inbox/conversations.spec.ts:584:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toHaveCount(expected)

Locator: getByTestId('all-contacts-row')
Expected: 1
Received: 3
Call log:
  - expect.toHaveCount with timeout 5000ms
  - waiting for getByTestId('all-contacts-row')
    4 × locator resolved to 4 elements
      - unexpected value "4"
    - locator resolved to 5 elements
    - unexpected value "5"
    3 × locator resolved to 3 elements
      - unexpected value "3"

    at /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/inbox/conversations.spec.ts:643:11
    at /home/neetoci/neeto-chat-web/playwright-tests/e2e/tests/inbox/conversations.spec.ts:630:5
```

# Page snapshot

```yaml
- button "AO":
  - paragraph: AO
  - img
- link:
  - /url: /
  - img
- link "Inbox":
  - /url: /admin/widget/inbox/a2529266-123f-40ab-8708-33f283d84a5c?filter_by=unresolved
  - img
  - text: Inbox
  - img
- link "Unresolved 3":
  - /url: /admin/widget/inbox?filter_by=unresolved
- link "Assigned to me 0":
  - /url: /admin/widget/inbox?filter_by=assigned_to_me
- link "Unassigned 3":
  - /url: /admin/widget/inbox?filter_by=unassigned
- link "Assigned 0":
  - /url: /admin/widget/inbox?filter_by=assigned
- link "Mentioned 0":
  - /url: /admin/widget/inbox?filter_by=mentioned
- link "Waiting on customer 1":
  - /url: /admin/widget/inbox?filter_by=waiting_on_customer
- link "Closed 0":
  - /url: /admin/widget/inbox?filter_by=closed
- link "Spam 3":
  - /url: /admin/widget/inbox?filter_by=spam
- link "Trash 0":
  - /url: /admin/widget/inbox?filter_by=trash
- link "All 4":
  - /url: /admin/widget/inbox?filter_by=all
- link "Contacts":
  - /url: /admin/contacts?filter_by=all
  - img
  - text: Contacts
  - img
- link "Team members":
  - /url: /admin/members
  - img
  - text: Team members
- link "Admin panel":
  - /url: /admin/admin-panel
  - img
  - text: Admin panel
- link "My preferences":
  - /url: /admin/my-preferences
  - img
  - text: My preferences
- button:
  - img
- heading "Unresolved" [level=2]:
  - text: Unresolved
  - button:
    - img
- text: Newest
- combobox
- button
- img
- searchbox "Name, email or messages": trent43@gmail.com
- button "Close search"
- button "Sara Lakin a few seconds ago Admoveo ubi vox quae acsi cibo cogito ratione deleniti."
- button "Dr. Bobby Mante a few seconds ago Vero capto viduo debeo."
- button "Felipe Ledner a few seconds ago Tener tibi cunctatio altus arcus tenax cariosus corporis explicabo."
- button "Francis Fahey a few seconds ago Nemo dolorem denuncio cura veritas talio villa cervus corona accusator."
- paragraph: Sara Lakin
- textbox "Add ticket title"
- button
- paragraph:
  - text: This ticket started at
  - link "unknown":
    - /url: https://neeto.com/neetochat
  - text: a few seconds ago
- img
- text: Admoveo ubi vox quae acsi cibo cogito ratione deleniti. a few seconds ago. Seen. Auto reply
- textbox "editor-content":
  - paragraph
- button "Chat"
- button "Note"
- button
- button
- button
- button
- button
- button "Send" [disabled]
- heading "Details" [level=5]
- paragraph: Status
- paragraph: New
- img
- paragraph: Priority
- heading "Low" [level=5]
- img
- paragraph: Group
- heading "--" [level=5]
- img
- paragraph: Assignee
- heading "--" [level=5]
- img
- img
- paragraph: Sara Lakin
- button
- img
- paragraph: spencer_murphy29@yahoo.com
- button
- img
- paragraph: "-"
- button
- img
- paragraph: Ashburn, Virginia, United States
- img
- paragraph: Asia/Kolkata
- img
- paragraph: Windows
- img
- paragraph: Chrome
- button "View more"
- button "Create NeetoDesk ticket"
- heading "Tags" [level=5]:
  - heading "Tags" [level=5]
- button
- heading "Notes" [level=5]:
  - heading "Notes" [level=5]
- button
- heading "Keyboard shortcuts" [level=4]
- button
- heading "GLOBAL" [level=6]
- paragraph: See keyboard shortcuts
- text: shift /
- paragraph: Close modals, panes
- text: esc
- paragraph: Submit form or text input
- text: ctrl enter
- heading "NeetoChat specific" [level=6]
- paragraph: Close ticket
- text: ctrl alt y
- paragraph: Add canned responses
- text: ctrl alt r
- paragraph: Attach NeetoKB article
- text: ctrl alt a
- paragraph: Add gif
- text: ctrl alt g
- paragraph: Add image
- text: ctrl alt k
- paragraph: Add video
- text: ctrl alt v
- paragraph: Switch to chat(while typing in note)
- text: ctrl alt c
- paragraph: Switch to note(while typing in chat)
- text: ctrl alt n
- paragraph: Save title
- text: enter
- paragraph: Cancel edit
- text: esc
- heading "Workflow builder" [level=6]
- paragraph: Delete node or edge(based on selection)
- text: Delete
- paragraph: Save new button label(while renaming button)
- text: enter
- paragraph: Cancel button renaming
- text: esc
```

# Test source

```ts
  543 |           .getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
  544 |           .click();
  545 |
  546 |         await page
  547 |           .getByTestId(
  548 |             CONVERSATIONS_SELECTORS.statusListItem(
  549 |               t("labels.waitingOnCustomer")
  550 |             )
  551 |           )
  552 |           .click();
  553 |
  554 |         await neetoPlaywrightUtilities.verifyToast();
  555 |
  556 |         await page
  557 |           .getByTestId(INBOX_MENU.inboxMenuTab(t("labels.waitingOnCustomer")))
  558 |           .click();
  559 |         await conversationsPage.openConversationFromList(contact.name);
  560 |
  561 |         await expect(
  562 |           page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
  563 |         ).toHaveText(t("labels.waitingOnCustomer"));
  564 |       }
  565 |     );
  566 |
  567 |     await test.step("Step 3: Revert conversation status", async () => {
  568 |       await page
  569 |         .getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
  570 |         .click();
  571 |
  572 |       await page
  573 |         .getByTestId(CONVERSATIONS_SELECTORS.statusListItem(t("labels.open")))
  574 |         .click();
  575 |
  576 |       await neetoPlaywrightUtilities.verifyToast();
  577 |
  578 |       await expect(
  579 |         page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
  580 |       ).toHaveText(t("labels.open"));
  581 |     });
  582 |   });
  583 |
  584 |   test("should verify name - add, edit from right sidebar", async ({
  585 |     page,
  586 |     conversationsPage,
  587 |     contactsPage,
  588 |     contactApis,
  589 |     conversationsApis,
  590 |   }) => {
  591 |     const newContact = {
  592 |       email: faker.internet.email(),
  593 |       name: faker.person.fullName(),
  594 |       visitorToken: faker.string.uuid(),
  595 |     };
  596 |
  597 |     await test.step("Step 2: Update contact name with valid name", async () => {
  598 |       const contactName = faker.person.fullName();
  599 |       await conversationsPage.openConversationFromList(contact.name);
  600 |
  601 |       await page
  602 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
  603 |         .click();
  604 |
  605 |       await page
  606 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputName)
  607 |         .fill(contactName);
  608 |
  609 |       await page
  610 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitNameIcon)
  611 |         .click();
  612 |
  613 |       await expect(
  614 |         page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
  615 |       ).toHaveText(contactName);
  616 |     });
  617 |
  618 |     await test.step("Step 3: Create new contact without name", async () => {
  619 |       await contactApis.createVisitor(newContact);
  620 |
  621 |       const newContactVisitorToken = await contactsPage.getVisitorToken({
  622 |         visitor: newContact.email.toLowerCase(),
  623 |       });
  624 |
  625 |       await conversationsApis.createWidgetConversation({
  626 |         visitorToken: newContactVisitorToken,
  627 |       });
  628 |     });
  629 |
  630 |     await test.step(
  631 |       "Step 4: Set name for contact via conversation right-sidebar",
  632 |       async () => {
  633 |         await page
  634 |           .getByTestId(CONVERSATIONS_SELECTORS.searchConversationButton)
  635 |           .click();
  636 |
  637 |         await page
  638 |           .getByTestId(CONVERSATIONS_SELECTORS.searchConversationTextField)
  639 |           .fill(newContact.email.toLowerCase());
  640 |
  641 |         await expect(
  642 |           page.getByTestId(CONVERSATIONS_SELECTORS.conversations)
> 643 |         ).toHaveCount(1);
      |           ^ Error: Timed out 5000ms waiting for expect(locator).toHaveCount(expected)
  644 |
  645 |         await page
  646 |           .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
  647 |           .click();
  648 |
  649 |         await page
  650 |           .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputName)
  651 |           .fill(newContact.name);
  652 |
  653 |         await page
  654 |           .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitNameIcon)
  655 |           .click();
  656 |
  657 |         await expect(
  658 |           page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
  659 |         ).toHaveText(newContact.name);
  660 |       }
  661 |     );
  662 |
  663 |     await test.step("Step 5: Start editing name and cancel", async () => {
  664 |       await page
  665 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
  666 |         .click();
  667 |
  668 |       await page
  669 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputName)
  670 |         .fill(faker.word.words(2));
  671 |
  672 |       await page
  673 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelNameIcon)
  674 |         .click();
  675 |
  676 |       await expect(
  677 |         page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
  678 |       ).toHaveText(newContact.name);
  679 |     });
  680 |   });
  681 |
  682 |   test("should verify email - add, edit from right sidebar", async ({
  683 |     page,
  684 |     conversationsPage,
  685 |   }) => {
  686 |     const newEmail = faker.internet.email();
  687 |
  688 |     await test.step(
  689 |       "Step 2: Type incomplete email and hit cancel button",
  690 |       async () => {
  691 |         await conversationsPage.openConversationFromList(contact.name);
  692 |
  693 |         await page
  694 |           .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
  695 |           .click();
  696 |
  697 |         await page
  698 |           .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
  699 |           .fill(faker.word.words(1));
  700 |
  701 |         await page
  702 |           .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelEmailIcon)
  703 |           .click();
  704 |
  705 |         await expect(
  706 |           page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
  707 |         ).toContainText(contact.email.toLowerCase());
  708 |       }
  709 |     );
  710 |
  711 |     await test.step("Step 3: Set valid email for contact", async () => {
  712 |       await page
  713 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
  714 |         .click();
  715 |
  716 |       await page
  717 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
  718 |         .fill(newEmail.toLowerCase());
  719 |
  720 |       await page
  721 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitEmailIcon)
  722 |         .click();
  723 |
  724 |       await expect(
  725 |         page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
  726 |       ).toHaveText(newEmail.toLowerCase());
  727 |     });
  728 |
  729 |     await test.step("Step 4: Start editing email and cancel", async () => {
  730 |       await page
  731 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
  732 |         .click();
  733 |
  734 |       await expect(
  735 |         page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
  736 |       ).toHaveValue(newEmail.toLowerCase());
  737 |
  738 |       await page
  739 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
  740 |         .fill(faker.internet.email());
  741 |
  742 |       await page
  743 |         .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelEmailIcon)
```