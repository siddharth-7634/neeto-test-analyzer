import { APP_NAME, EMPTY_ASSIGNEE, ROLE, FIELD_NAMES } from "@constants/texts";
import { faker } from "@faker-js/faker";
import test from "@fixtures";
import {
  getGlobalUserState,
  Member,
  skipTest,
  COMMON_SELECTORS as NEETO_COMMON_SELECTORS,
  COMMON_TEXTS,
} from "@neetoplaywright";
import { Locator, expect } from "@playwright/test";
import {
  COMMON_SELECTORS,
  CONVERSATIONS_SELECTORS,
  INBOX_MENU,
} from "@selectors";
import { Visitor } from "@types";

test.describe("Inbox conversation page", () => {
  let visitorToken: string;
  const contact: Visitor = {
    email: faker.internet.email(),
    name: faker.person.fullName(),
    visitorToken: faker.string.uuid(),
  };

  test.beforeEach(async ({ contactsPage, conversationsApis, contactApis }) => {
    await test.step("Step 1: Create conversation for contact", async () => {
      await contactApis.createVisitor(contact);

      visitorToken = await contactsPage.getVisitorToken({
        visitor: contact.name,
        isEmail: false,
      });

      await conversationsApis.createWidgetConversation({
        visitorToken,
      });
    });
  });

  test.afterEach(async ({ conversationsPage, contactApis }, testInfo) => {
    if (testInfo.title.includes(COMMON_TEXTS.skipCleanup)) return;
    const conversationId = conversationsPage.extractConversationIdFromUrl();

    const conversationData =
      await conversationsPage.fetchConversationViaRequest({ conversationId });
    const contactId = conversationData.conversation.metadata.visitor.id;
    if (contactId) {
      await contactApis.deleteContacts({ contactIds: [contactId] });
    }
  });

  test("should verify closed conversation actions", async ({
    page,
    t,
    conversationsPage,
  }) => {
    let conversationUrl: string;
    let chatMessageButton: Locator;

    await test.step(
      "Step 2: Open first conversation in list and verify status is Open",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        conversationUrl = page.url();

        chatMessageButton = page.getByTestId(
          CONVERSATIONS_SELECTORS.chatMessageButton
        );

        await expect(chatMessageButton).toBeVisible();
        await conversationsPage.setConversationStatus(t("labels.open"));

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
        ).toHaveText(t("labels.open"));
      }
    );

    await test.step(
      "Step 3: Close conversation and verify and navigate to the closed view",
      () => conversationsPage.setConversationStatus(t("common.closed"))
    );

    await test.step("Step 4: Verify conversation is closed", async () => {
      await page.goto(conversationUrl.replace("open", "closed"));

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.chatMessageButton)
      ).toBeHidden();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.closed"));
    });

    await test.step("Step 5: Re-open conversation", () =>
      conversationsPage.setConversationStatus(t("labels.open"))
    );

    await test.step("Step 6: Verify conversation is re-opened", async () => {
      await page.goto(conversationUrl.replace("closed", "open"));

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.open"));
      await expect(chatMessageButton).toBeVisible();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.open"));
    });
  });

  test("should mark conversation as 'waiting on customer' and close the chat", async ({
    page,
    conversationsPage,
    t,
    neetoPlaywrightUtilities,
  }) => {
    await test.step(
      "Step 2: Open first conversation and mark it as waiting on customer",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        await conversationsPage.setConversationStatus(
          t("labels.waitingOnCustomer")
        );
      }
    );

    await test.step("Step 3: Verify conversation status", async () => {
      await page.getByTestId(INBOX_MENU.waitingOnCustomerTab).click();

      await conversationsPage.openConversationFromList(contact.name);

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.waitingOnCustomer"));
    });

    await test.step("Step 4: Close the conversation", async () => {
      await conversationsPage.setConversationStatus(t("labels.closed"));
      await page.getByTestId(INBOX_MENU.closedTab).click();
      await neetoPlaywrightUtilities.waitForPageLoad();
      await conversationsPage.openConversationFromList(contact.name);
      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.closed"));
    });
  });

  test(`should mark conversation as 'spam' ${COMMON_TEXTS.skipCleanup}`, async ({
    page,
    conversationsPage,
    conversationsApis,
    t,
    neetoPlaywrightUtilities,
  }) => {
    let conversationUrl: string;

    await test.step("Step 2: Open conversation of the visitor", () =>
      conversationsPage.openConversationFromList(contact.name)
    );

    await test.step(
      "Step 3: Open selected conversation and mark it as spam",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        conversationUrl = page.url();
        await conversationsPage.setConversationStatus(t("labels.spam"));
        await page
          .getByTestId(CONVERSATIONS_SELECTORS.spamCustomerBlockButton)
          .click();
      }
    );

    await test.step("Step 4: Verify selected conversation status", async () => {
      await page.getByTestId(INBOX_MENU.spamTab).click();

      await conversationsPage.openConversationFromList(contact.name);

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.spam"));
    });

    await test.step("Step 5: Mark conversation as not spam", async () => {
      await conversationsPage.setConversationStatus(t("labels.open"));

      await page.goto(
        conversationUrl.replace(FIELD_NAMES.spam, FIELD_NAMES.open)
      );

      await expect(
        page
          .getByTestId(CONVERSATIONS_SELECTORS.conversations)
          .filter({ hasText: contact.name })
      ).toBeVisible();
    });

    await test.step(
      "Step 6: Create more conversations for same visitor",
      async () => {
        for (let i = 0; i < 4; i++) {
          await conversationsApis.createWidgetConversation({
            visitorToken,
          });
        }

        await expect(
          page
            .getByTestId(CONVERSATIONS_SELECTORS.conversations)
            .filter({ hasText: contact.name })
        ).toHaveCount(5, { timeout: 20_000 });
      }
    );

    await test.step(
      "Step 7: Block contact and verify all existing conversations for the contact are marked as spam",
      async () => {
        await page
          .getByTestId(CONVERSATIONS_SELECTORS.conversationStatusDropdown)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.statusListItem(t("labels.spam")))
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.spamCustomerBlockButton)
          .click();

        await neetoPlaywrightUtilities.verifyToast();

        await page.getByTestId(INBOX_MENU.spamTab).click();

        await neetoPlaywrightUtilities.waitForPageLoad();

        await expect(
          page
            .getByTestId(CONVERSATIONS_SELECTORS.conversations)
            .filter({ hasText: contact.name })
        ).toHaveCount(5);

        await conversationsPage.deleteMultipleConversationsFromUser({
          searchTerm: contact.name,
          view: FIELD_NAMES.spam,
        });
      }
    );
  });

  test("should assign and unassign conversations to current user", async ({
    page,
    conversationsPage,
    neetoPlaywrightUtilities,
  }) => {
    let conversationUrl: string;
    const { currentUserName: userName } = getGlobalUserState();

    await test.step(
      "Step 2: Open first conversation and assign it to agent",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        conversationUrl = page.url();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.membersListItem)
          .filter({ hasText: userName })
          .click();
        await neetoPlaywrightUtilities.verifyToast();

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown)
        ).toContainText(userName);
      }
    );

    await test.step("Step 3: Verify conversation assignee", async () => {
      await page.goto(conversationUrl.replace("open", "assigned_to_me"));

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown)
      ).toContainText(userName);
    });

    await test.step("Step 4: Unassign agent", async () => {
      await page.getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown).click();
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.membersListItem)
        .filter({ hasText: userName })
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown)
      ).toContainText(EMPTY_ASSIGNEE);
    });
  });

  test("should mention user in conversation note", async ({
    page,
    conversationsPage,
  }) => {
    let conversationUrl: string;
    const { currentUserName: userName } = getGlobalUserState();

    await test.step(
      "Step 2: Open first conversation in list and mention user in note",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        conversationUrl = page.url();

        await page.getByTestId(CONVERSATIONS_SELECTORS.chatNoteButton).click();

        await page
          .getByTestId(COMMON_SELECTORS.neetoEditor)
          .getByTestId(CONVERSATIONS_SELECTORS.editorContent)
          .fill("@");

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.mentionUser(userName))
          .click();

        await expect(
          page.getByTestId(COMMON_SELECTORS.neetoEditor)
        ).toContainText(userName);

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.sendMessageButton)
          .click();
      }
    );

    await test.step(
      "Step 3: Verify mention note has been added to conversation",
      async () => {
        await page.goto(
          conversationUrl.replace(FIELD_NAMES.open, FIELD_NAMES.mentioned)
        );

        await expect(
          page
            .getByTestId(CONVERSATIONS_SELECTORS.chatMessageText)
            .filter({ hasText: userName })
        ).toBeVisible();
      }
    );
  });

  test("should mark conversation as 'on-hold'", async ({
    page,
    conversationsPage,
    t,
  }) => {
    let conversationUrl: string;

    await test.step(
      "Step 2: Open first conversation and mark it as on-hold",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        conversationUrl = page.url();

        await conversationsPage.setConversationStatus(t("labels.onHold"));
      }
    );

    await test.step("Step 3: Verify conversation status", async () => {
      await page.goto(conversationUrl.replace("open", "on_hold"));

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.onHold"));
    });
  });

  test("should trash conversations", async ({ page, conversationsPage, t }) => {
    let conversationUrl: string;

    await test.step(
      "Step 2: Open first conversation and mark it as trash",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        conversationUrl = page.url();

        await conversationsPage.setConversationStatus(t("labels.trash"));
      }
    );

    await test.step("Step 3: Verify conversation status", async () => {
      await page.goto(conversationUrl.replace("open", "trash"));

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.trash"));
    });
  });

  test("should assign conversations to agents", async ({
    page,
    conversationsPage,
    neetoPlaywrightUtilities,
  }) => {
    let conversationUrl: string;

    const memberDetails = {
      email: faker.internet.email(),
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      role: ROLE.agent,
      appName: APP_NAME,
    };

    const member = new Member(neetoPlaywrightUtilities);

    await test.step("Step 2: Create another agent", async () => {
      await member.addMemberViaRequest({
        email: memberDetails.email,
        appName: memberDetails.appName,
        role: memberDetails.role,
      });

      await member.editMemberViaRequest({
        email: memberDetails.email,
        firstName: memberDetails.firstName,
        lastName: memberDetails.lastName,
      });

      await conversationsPage.openConversationFromList(contact.name);
      conversationUrl = page.url();

      await page.getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown).click();

      await page
        .getByTestId(COMMON_SELECTORS.inputField)
        .fill(memberDetails.firstName);

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.memberListItem)
        .filter({
          hasText: [memberDetails.firstName, memberDetails.lastName].join(" "),
        })
        .click();
    });

    await test.step("Step 3: Verify conversation assignee", async () => {
      await page.goto(
        conversationUrl.replace(FIELD_NAMES.open, FIELD_NAMES.assigned)
      );

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.assigneeDropdown)
      ).toContainText(
        [memberDetails.firstName, memberDetails.lastName].join(" ")
      );
    });

    await test.step("Step 4: Deactive created member", async () => {
      await member.deactivateMemberViaRequest(memberDetails.email);
    });
  });

  test("should verify conversation priority dropdown - right sidebar", async ({
    page,
    conversationsPage,
    neetoPlaywrightUtilities,
    t,
  }) => {
    await test.step(
      "Step 2: Open conversation and set conversation priority",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
        ).toHaveText(t("inbox.ticket.priority.low"));

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.searchTeamOrMemberField)
          .fill(t("inbox.ticket.priority.high"));

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.priorityListItem)
          .click();

        await neetoPlaywrightUtilities.verifyToast();

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
        ).toHaveText(t("inbox.ticket.priority.high"));
      }
    );

    await test.step("Step 3: Revert conversation priority", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.searchTeamOrMemberField)
        .fill(t("inbox.ticket.priority.low"));

      await page.getByTestId(CONVERSATIONS_SELECTORS.priorityListItem).click();

      await neetoPlaywrightUtilities.verifyToast();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationPriority)
      ).toHaveText(t("inbox.ticket.priority.low"));
    });
  });

  test("should verify conversation status dropdown - right sidebar", async ({
    page,
    conversationsPage,
    neetoPlaywrightUtilities,
    t,
  }) => {
    await test.step(
      "Step 2: Open conversation and set conversation status",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
        ).toHaveText(t("common.new"));

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
          .click();

        await page
          .getByTestId(
            CONVERSATIONS_SELECTORS.statusListItem(
              t("labels.waitingOnCustomer")
            )
          )
          .click();

        await neetoPlaywrightUtilities.verifyToast();

        await page
          .getByTestId(INBOX_MENU.inboxMenuTab(t("labels.waitingOnCustomer")))
          .click();
        await conversationsPage.openConversationFromList(contact.name);

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
        ).toHaveText(t("labels.waitingOnCustomer"));
      }
    );

    await test.step("Step 3: Revert conversation status", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.statusListItem(t("labels.open")))
        .click();

      await neetoPlaywrightUtilities.verifyToast();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.conversationStatus)
      ).toHaveText(t("labels.open"));
    });
  });

  test("should verify name - add, edit from right sidebar", async ({
    page,
    conversationsPage,
    contactsPage,
    contactApis,
    conversationsApis,
  }) => {
    const newContact = {
      email: faker.internet.email(),
      name: faker.person.fullName(),
      visitorToken: faker.string.uuid(),
    };

    await test.step("Step 2: Update contact name with valid name", async () => {
      const contactName = faker.person.fullName();
      await conversationsPage.openConversationFromList(contact.name);

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputName)
        .fill(contactName);

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitNameIcon)
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
      ).toHaveText(contactName);
    });

    await test.step("Step 3: Create new contact without name", async () => {
      await contactApis.createVisitor(newContact);

      const newContactVisitorToken = await contactsPage.getVisitorToken({
        visitor: newContact.email.toLowerCase(),
      });

      await conversationsApis.createWidgetConversation({
        visitorToken: newContactVisitorToken,
      });
    });

    await test.step(
      "Step 4: Set name for contact via conversation right-sidebar",
      async () => {
        await page
          .getByTestId(CONVERSATIONS_SELECTORS.searchConversationButton)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.searchConversationTextField)
          .fill(newContact.email.toLowerCase());

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.conversations)
        ).toHaveCount(1);

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputName)
          .fill(newContact.name);

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitNameIcon)
          .click();

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
        ).toHaveText(newContact.name);
      }
    );

    await test.step("Step 5: Start editing name and cancel", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputName)
        .fill(faker.word.words(2));

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelNameIcon)
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
      ).toHaveText(newContact.name);
    });
  });

  test("should verify email - add, edit from right sidebar", async ({
    page,
    conversationsPage,
  }) => {
    const newEmail = faker.internet.email();

    await test.step(
      "Step 2: Type incomplete email and hit cancel button",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
          .fill(faker.word.words(1));

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelEmailIcon)
          .click();

        await expect(
          page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
        ).toContainText(contact.email.toLowerCase());
      }
    );

    await test.step("Step 3: Set valid email for contact", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
        .fill(newEmail.toLowerCase());

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitEmailIcon)
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
      ).toHaveText(newEmail.toLowerCase());
    });

    await test.step("Step 4: Start editing email and cancel", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
      ).toHaveValue(newEmail.toLowerCase());

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
        .fill(faker.internet.email());

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelEmailIcon)
        .click();

      await expect(
        page.getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
      ).toHaveText(newEmail.toLowerCase());
    });
  });

  test("should verify phone number - add, edit from right sidebar", async ({
    page,
    conversationsPage,
  }) => {
    const phoneNumber = faker.phone.number({ style: "international" });

    await test.step(
      "Step 2: Type phone number and hit cancel button",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
          .click();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputPhoneNumber)
          .fill(faker.phone.number({ style: "international" }));

        await page
          .getByTestId(
            CONVERSATIONS_SELECTORS.rightSidebar.cancelPhoneNumberIcon
          )
          .click();

        await expect(
          page.getByTestId(
            CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue
          )
        ).toContainText("-");
      }
    );

    await test.step("Step 3: Set valid phone number for contact", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputPhoneNumber)
        .fill(phoneNumber);

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitPhoneNumber)
        .click();

      await expect
        .poll(async () => {
          const phoneNumberWithCountryCode = await page
            .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
            .textContent();

          return phoneNumberWithCountryCode?.replace(/\s+/g, "");
        })
        .toContain(phoneNumber);
    });

    await test.step("Step 4: Start editing number and cancel", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputPhoneNumber)
        .fill(faker.phone.number({ style: "international" }));

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.cancelPhoneNumberIcon)
        .click();

      await expect
        .poll(async () => {
          const phoneNumberWithCountryCode = await page
            .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
            .textContent();

          return phoneNumberWithCountryCode?.replace(/\s+/g, "");
        })
        .toContain(phoneNumber);
    });
  });

  test("should verify clipboard for name, email, phone number from right sidebar", async ({
    page,
    conversationsPage,
    neetoPlaywrightUtilities,
    context,
  }) => {
    skipTest.forDevelopmentEnv();

    await context.grantPermissions(["clipboard-read", "clipboard-write"]);
    await test.step(
      "Step 2: Open conversation and verfiy name copy feature",
      async () => {
        await conversationsPage.openConversationFromList(contact.name);
        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameValue)
          .hover();

        await page
          .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.nameContainer)
          .getByTestId(NEETO_COMMON_SELECTORS.copyToClipboardButton)
          .click();

        const name = await page.evaluate(() => navigator.clipboard.readText());
        await expect(name).toBe(contact.name);
      }
    );

    await test.step("Step 3: Verify email copy feature", async () => {
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailInput)
        .fill(contact.email);

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitEmailIcon)
        .click();
      await neetoPlaywrightUtilities.verifyToast();
      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailValue)
        .hover();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.emailContainer)
        .getByTestId(NEETO_COMMON_SELECTORS.copyToClipboardButton)
        .click();

      const copiedEmail = await page.evaluate(() =>
        navigator.clipboard.readText()
      );
      await expect(copiedEmail).toBe(contact.email.toLowerCase());
    });

    await test.step("Step 4: Verfiy phone number copy feature", async () => {
      const phoneNumber = faker.phone.number({ style: "national" });

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.inputPhoneNumber)
        .fill(phoneNumber);

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.submitPhoneNumberIcon)
        .click();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberValue)
        .hover();

      await page
        .getByTestId(CONVERSATIONS_SELECTORS.rightSidebar.phoneNumberContainer)
        .getByTestId(NEETO_COMMON_SELECTORS.copyToClipboardButton)
        .click();

      const copiedPhoneNumber = await page.evaluate(() =>
        navigator.clipboard.readText()
      );

      const normalizedExpected = phoneNumber.replace(/[+\s()-]/g, "");
      const normalizedReceived = copiedPhoneNumber.replace(/[+\s()-]/g, "");

      expect(normalizedReceived).toContain(normalizedExpected);
    });
  });

  test("should not send blank messages", async ({
    page,
    conversationsPage,
  }) => {
    await conversationsPage.openConversationFromList(contact.name);
    const textareaDiv = page.getByTestId(COMMON_SELECTORS.neetoEditor);
    await textareaDiv.click();
    await page.keyboard.press("Enter");

    await expect(
      page.getByTestId(CONVERSATIONS_SELECTORS.chatMessageText)
    ).toHaveCount(1);
  });
});
