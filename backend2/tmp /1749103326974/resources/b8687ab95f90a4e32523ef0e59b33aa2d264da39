# Test info

- Name: Verify invoices >> should verify client receives invoice email and invoice link
- Location: /home/neetoci/neeto-invoice-web/playwright-tests/e2e/tests/invoice.spec.ts:28:7

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('cell', { name: 'Frozen Ceramic Keyboard' })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('cell', { name: 'Frozen Ceramic Keyboard' })

    at ProjectPage.verifyProjectInTable (/home/neetoci/neeto-invoice-web/playwright-tests/e2e/poms/projects.ts:112:66)
    at ProjectPage.searchProjectAndVerify (/home/neetoci/neeto-invoice-web/playwright-tests/e2e/poms/projects.ts:46:16)
    at ProjectPage.archiveProjectViaDashboard (/home/neetoci/neeto-invoice-web/playwright-tests/e2e/poms/projects.ts:74:5)
    at /home/neetoci/neeto-invoice-web/playwright-tests/e2e/tests/invoice.spec.ts:95:5
```

# Page snapshot

```yaml
- button "AO":
  - paragraph: AO
  - img
- link:
  - /url: /
  - img
- link "Time tracking":
  - /url: /admin/time-tracking
  - img
  - text: Time tracking
- link "Projects":
  - /url: /admin/projects?primary_filter=active&search_term=Frozen%20Ceramic%20Keyboard
  - img
  - text: Projects
  - img
- link "Active 1":
  - /url: /admin/projects?primary_filter=active
- link "Archived 0":
  - /url: /admin/projects?primary_filter=archived
- link "All 1":
  - /url: /admin/projects?primary_filter=all
- link "Clients":
  - /url: /admin/clients?primary_filter=active
  - img
  - text: Clients
  - img
- link "Invoices":
  - /url: /admin/invoices
  - img
  - text: Invoices
  - img
- link "Reports":
  - /url: /admin/reports
  - img
  - text: Reports
  - img
- link "Team members":
  - /url: /admin/members
  - img
  - text: Team members
- link "Admin panel":
  - /url: /admin/admin-panel?category=general
  - img
  - text: Admin panel
- link "My preferences":
  - /url: /admin/my-preferences
  - img
  - text: My preferences
- button:
  - img
- heading "Active projects" [level=1]
- img
- searchbox "Search projects": Frozen Ceramic Keyboard
- link "Add new project":
  - /url: /admin/projects/new
- heading "0 projects" [level=4]
- button
- paragraph: "Search term:"
- paragraph: Contains
- paragraph: Frozen Ceramic Keyboard
- img
- button "Clear filters"
- heading "There are no active projects to show" [level=3]
- link "Add new project":
  - /url: /admin/projects/new
- heading "Keyboard shortcuts" [level=4]
- button
- heading "GLOBAL" [level=6]
- paragraph: See keyboard shortcuts
- text: shift /
- paragraph: Close modals, panes
- text: esc
- paragraph: Submit form or text input
- text: ctrl enter
- heading "CALENDAR" [level=6]
- paragraph: Go to next day
- text: right
- paragraph: Go to previous day
- text: left
```

# Test source

```ts
   12 |
   13 | import { AddProjectViaUIProps, TimePeriodTypes } from "./types";
   14 |
   15 | export default class ProjectPage {
   16 |   page: Page;
   17 |   neetoPlaywrightUtilities: CustomCommands;
   18 |   t: TFunction;
   19 |   constructor(page: Page, neetoPlaywrightUtilities: CustomCommands) {
   20 |     this.page = page;
   21 |     this.neetoPlaywrightUtilities = neetoPlaywrightUtilities;
   22 |     this.t = getI18nInstance().t;
   23 |   }
   24 |
   25 |   addProjectViaUI = async ({
   26 |     projectName,
   27 |     billingMethod,
   28 |   }: AddProjectViaUIProps) => {
   29 |     await this.page
   30 |       .getByTestId(PROJECT_SELECTORS.nameTextField)
   31 |       .fill(projectName);
   32 |
   33 |     const billingMethodElement = this.page.getByTestId(
   34 |       PROJECT_SELECTORS.billingMethodSelectContainer
   35 |     );
   36 |     await billingMethodElement.fill(billingMethod);
   37 |     await this.page.keyboard.press("Enter");
   38 |   };
   39 |
   40 |   searchProjectAndVerify = async (projectName: string) => {
   41 |     await expect(this.page.getByTestId(COMMON_SELECTORS.heading)).toBeVisible();
   42 |     const searchInput = this.page.getByTestId(COMMON_SELECTORS.inputField);
   43 |
   44 |     await searchInput.fill(projectName);
   45 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
   46 |     await this.verifyProjectInTable(projectName);
   47 |   };
   48 |
   49 |   getProjectIdFromUrl = () => new URL(this.page.url()).pathname.split("/")[2];
   50 |
   51 |   archiveProject = async () => {
   52 |     await this.page.getByTestId(COMMON_SELECTORS.dropdownIcon).click();
   53 |     await this.page
   54 |       .getByTestId(COMMON_SELECTORS.dropdownContainer)
   55 |       .getByRole("button", { name: this.t("common.archive") })
   56 |       .click();
   57 |
   58 |     await this.page
   59 |       .getByTestId(COMMON_SELECTORS.alertModalSubmitButton)
   60 |       .click();
   61 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
   62 |   };
   63 |
   64 |   archiveProjectViaDashboard = async ({
   65 |     projectName,
   66 |     goToProjectIndex = true,
   67 |   }: {
   68 |     projectName: string;
   69 |     goToProjectIndex?: boolean;
   70 |   }) => {
   71 |     goToProjectIndex &&
   72 |       (await this.page.getByTestId(PROJECT_SELECTORS.navTab).click());
   73 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
   74 |     await this.searchProjectAndVerify(projectName);
   75 |
   76 |     await this.page
   77 |       .getByRole("cell", { name: projectName })
   78 |       .getByRole("button")
   79 |       .click();
   80 |
   81 |     await this.page
   82 |       .getByTestId(COMMON_SELECTORS.dropdownContainer)
   83 |       .getByRole("button", { name: this.t("common.archive") })
   84 |       .click();
   85 |
   86 |     await this.page
   87 |       .getByTestId(COMMON_SELECTORS.alertModalSubmitButton)
   88 |       .click();
   89 |
   90 |     await expect(this.page.getByRole("cell", { name: projectName })).toBeHidden(
   91 |       { timeout: 15_000 }
   92 |     );
   93 |   };
   94 |
   95 |   autolockTimePeriod = async (timePeriod: TimePeriodTypes) => {
   96 |     await this.page
   97 |       .getByTestId(PROJECT_SELECTORS.autolockCheckboxInput)
   98 |       .check();
   99 |     if (timePeriod === this.t("forms.label.endOfMonth")) {
  100 |       await this.page
  101 |         .getByTestId(COMMON_SELECTORS.checkboxInput(timePeriod))
  102 |         .check();
  103 |     } else {
  104 |       await this.page
  105 |         .getByTestId(COMMON_SELECTORS.radioInput(timePeriod))
  106 |         .click();
  107 |     }
  108 |   };
  109 |
  110 |   verifyProjectInTable = async (projectName: string) => {
  111 |     await Promise.all([
> 112 |       expect(this.page.getByRole("cell", { name: projectName })).toBeVisible(),
      |                                                                  ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  113 |       expect(
  114 |         this.page.getByTestId(COMMON_SELECTORS.subheaderText)
  115 |       ).toContainText(this.t("common.countOf.projects_one", { count: 1 })),
  116 |     ]);
  117 |   };
  118 |
  119 |   private applyFilter = async () => {
  120 |     await expect(
  121 |       this.page.getByTestId(NEETO_FILTERS_SELECTORS.neetoFiltersBarClearButton)
  122 |     ).toBeVisible();
  123 |
  124 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  125 |     await this.page
  126 |       .getByTestId(NEETO_FILTERS_SELECTORS.filterDoneButton)
  127 |       .click();
  128 |   };
  129 |
  130 |   filterProjectByFilterLabels = async (label: string, value: string) => {
  131 |     await filterUtils.clearFiltersFromActionBlock(this.page);
  132 |     await filterUtils.openFilterPane(this.page);
  133 |     await this.neetoPlaywrightUtilities.selectOptionFromDropdown({
  134 |       label,
  135 |       value,
  136 |     });
  137 |
  138 |     await this.applyFilter();
  139 |   };
  140 |
  141 |   navigateToProjectPage = async () => {
  142 |     await this.page.getByTestId(PROJECT_SELECTORS.projectNavTab).click();
  143 |     await this.neetoPlaywrightUtilities.waitForPageLoad();
  144 |   };
  145 | }
  146 |
```