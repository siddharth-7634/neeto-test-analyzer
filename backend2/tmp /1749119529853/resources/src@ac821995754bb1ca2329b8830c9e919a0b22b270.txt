import { dynamicArray } from "@bigbinary/neeto-cist";
import { API_ROUTES } from "@constants/routes";
import { faker } from "@faker-js/faker";
import test from "@fixtures";
import {
  COMMON_SELECTORS,
  TAGS_SELECTORS,
  tableUtils,
  TagsPage,
} from "@neetoplaywright";
import { expect } from "@playwright/test";
import {
  SETTINGS_SELECTORS,
  TAGS_SELECTORS as CHAT_TAGS_SELECTORS,
} from "@selectors";
import { Visitor } from "@types";

test.describe("Ticket Tags page", () => {
  let visitor: Visitor, tagsPage: TagsPage;

  test.beforeEach(async ({ page, t, neetoPlaywrightUtilities }) => {
    await page.getByTestId(SETTINGS_SELECTORS.settingsNavTab).click();
    await page
      .getByTestId(COMMON_SELECTORS.sidebarSubLink(t("common.tags.ticketTags")))
      .click();

    tagsPage = new TagsPage(page, neetoPlaywrightUtilities);
  });

  test.afterEach(({ tagsPage: tagPage }) => tagPage.deleteExistingTicketTags());

  test("should be creatable, searchable, and deletable", async ({
    page,
    t,
    neetoPlaywrightUtilities,
  }) => {
    const tagName = faker.lorem.word();
    const newTagName = faker.lorem.word();
    let tagsPage: TagsPage;

    await test.step("Step 1: Create a new tag", async () => {
      tagsPage = new TagsPage(page, neetoPlaywrightUtilities);

      await expect(page.getByTestId(COMMON_SELECTORS.heading)).toHaveText(
        t("common.tags.ticketTags")
      );

      await tagsPage.addTagViaUI({
        tagName,
        addTagsLabel: t("common.addNew", { what: t("common.tag") }),
        tagsResponseUrl: API_ROUTES.tags.index,
      });
    });

    await test.step(
      "Step 2: Page should contain table with 2 columns",
      async () => {
        const columns = [t("common.name"), t("common.description")];

        await tableUtils.verifyTableColumnsExistence({
          columnNames: columns,
          page,
        });
      }
    );

    await test.step("Step 3: Verify filters on tags", () =>
      tagsPage.filterTagsViaUI(tagName)
    );

    await test.step("Step 4: Verify edit tags", () =>
      tagsPage.editTagViaUI({ tagName, newTagName })
    );

    await test.step(
      "Step 5: Tag should be searchable and deletable",
      async () => {
        await tagsPage.searchAndVerifyTags(newTagName);

        await page
          .getByRole("row", { name: newTagName })
          .getByTestId(COMMON_SELECTORS.dropdownIcon)
          .click();

        await page.getByTestId(TAGS_SELECTORS.deleteButton).click();

        await page.getByTestId(COMMON_SELECTORS.alertModalSubmitButton).click();
        await neetoPlaywrightUtilities.verifyToast();
        await expect(page.getByRole("row", { name: newTagName })).toBeHidden();
      }
    );
  });

  test("should be mergeable", async ({
    contactsPage,
    conversationsPage,
    page,
    t,
    tagsPage: chatTagsPage,
    contactApis,
    conversationsApis,
  }) => {
    const newTags = dynamicArray(2, () => ({
      description: faker.lorem.word(),
      name: faker.lorem.word(),
    }));

    await test.step("Step 1: Create two tags", () =>
      Promise.all(
        newTags.map(tag =>
          tagsPage.addTagsViaRequest({
            ...tag,
            tagsRequestUrl: API_ROUTES.tags.index,
          })
        )
      )
    );

    await test.step("Step 2: Create conversations", async () => {
      visitor = {
        name: faker.internet.username(),
        email: faker.internet.email(),
        visitorToken: faker.string.uuid(),
      };
      await contactApis.createVisitor(visitor);
      const token = await contactsPage.getVisitorToken({
        visitor: visitor.email,
      });

      await conversationsApis.createWidgetConversation({
        visitorToken: token,
      });
      await conversationsPage.goToChatPage();
      await conversationsPage.openConversationFromList(visitor.name);
    });

    await test.step("Step 3: Assign tag to conversations", () =>
      conversationsPage.addTagAndVerify(newTags[0].name)
    );

    await test.step(
      "Step 4: Go to merge tags page and verify title",
      async () => {
        await page.getByTestId(SETTINGS_SELECTORS.settingsNavTab).click();
        await page
          .getByTestId(
            COMMON_SELECTORS.sidebarSubLink(t("common.tags.ticketTags"))
          )
          .click();

        await tagsPage.navigateToMergeTagsPage();
      }
    );

    await test.step("Step 5: Merge tags", () =>
      tagsPage.mergeAndVerifyTagsViaUI({
        sourceTagName: newTags[0].name,
        destinationTagName: newTags[1].name,
        tagsBreadcrumbSelector: CHAT_TAGS_SELECTORS.ticketTagsBreadcrumb,
      })
    );

    await test.step("Step 6: Verify merged tags", async () => {
      await conversationsPage.goToChatPage();
      await conversationsPage.openConversationFromList(visitor.name);
      await chatTagsPage.verifyTagShouldNotBePresentInTagOptions(
        newTags[0].name
      );
      await page.getByTestId(TAGS_SELECTORS.addTagButton).click();
      await expect(
        page.getByTestId(CHAT_TAGS_SELECTORS.tagContainer).filter({
          hasText: newTags[1].name,
        })
      ).toBeVisible();
    });
  });
});
